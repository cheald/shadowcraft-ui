- item_json = @alt_items.as_json
- enchant_json = @enchants.as_json
- gem_json = @gems.as_json
- cache_to File.join(Rails.root, "public", @filename) do
  :plain
    window.ShadowcraftData = {};
    (function(R) {
      var iStatMap = #{squish_stats(item_json).to_json};
      var eStatMap = #{squish_stats(enchant_json).to_json};
      var gStatMap = #{squish_stats(gem_json).to_json};

      function expandStats(item, map) {
        item.stats = {}
        for(var i = 0; i < item.s.length; i++) {
          if(item.s[i] != 0)
            item.stats[map[i]] = item.s[i];
        }
        delete item.s;
      }

      R.GEMS = #{raw gem_json.to_json};
      R.ITEMS = #{raw item_json.to_json};
      R.ENCHANTS = #{raw enchant_json.to_json};
      R.TALENTS = #{raw @talents.to_json};
      R.TALENT_INDEX = #{raw Character::TALENTS.to_json};
      R.GLYPHS = #{raw @glyphs.to_json}

      function expandItem(item, map) {
        expandStats(item, map);
        item.quality = item.q;
        item.name = item.n;
        item.icon = item.i;
        item.item_id = item.id;
        item.sockets = item.so;
        item.equip_location = item.e;
        item.socketbonus = item.sb;
        item.requires = item.rq;
        item.slot = item.sl;
        delete item.q;
        delete item.n;
        delete item.i;
        delete item.so;
        delete item.e;
        delete item.sb;
        delete item.rq;
        delete item.sl;
      }

      function getRealSlot(slot, mergeRanged) {
        if(slot == 13 || slot == 21) { // Mainhand-only items
          return "mainhand";
        } else if(slot == 22 || slot == 23) {   // Offhand items
          return "offhand";
        } else if(mergeRanged && (slot == 15 || slot == 25)) {
          return "ranged";
        } else {
          return slot;
        }
      }
      var i;

      R.GEM_LOOKUP = {};
      for(var i = 0; i < R.GEMS.length; i++) {
        var g = R.GEMS[i];
        expandItem(g, gStatMap);
        g.Prismatic = true;
        switch(g.slot) {
          case "Blue":
            g.Blue = true; break;
          case "Purple":
            g.Blue = true; g.Red = true; break;
          case "Green":
            g.Blue = true; g.Yellow = true; break;
          case "Orange":
            g.Red = true; g.Yellow = true; break;
          case "Red":
            g.Red = true; break;
          case "Yellow":
            g.Yellow = true; break;
          case "Prismatic":
            g.Red = true; g.Blue = true; g.Yellow = true; break;
          case "Cogwheel":
            g.Red = true; g.Blue = true; g.Yellow = true; break;
          case "Meta":
            g.Meta = true; break;
        }
        R.GEM_LOOKUP[g.item_id] = g
      }

      R.SLOT_CHOICES = {mainhand: [], offhand: [], ranged: []};
      R.ENCHANT_SLOTS = {mainhand: []}; R.ENCHANT_SLOTS.offhand = R.ENCHANT_SLOTS.mainhand;
      R.ENCHANT_LOOKUP = {};
      for(i = 0; i <R.ENCHANTS.length; i++) {
        var enchant = R.ENCHANTS[i];
        expandStats(enchant, eStatMap);
        var s = getRealSlot(enchant.slot, true);
        if(R.ENCHANT_SLOTS[s] === undefined) { R.ENCHANT_SLOTS[s] = []; }
        R.ENCHANT_SLOTS[s][R.ENCHANT_SLOTS[s].length] = enchant;
        R.ENCHANT_LOOKUP[enchant.id] = enchant;
      }
      R.ITEM_LOOKUP = {};
      for(i = 0; i < R.ITEMS.length; i++) {
        var item = R.ITEMS[i];
        expandItem(item, iStatMap);

        item.item_id = item.id;
        if(item.equip_location == 6) {    // Add sockets to belts
          if(item.sockets === undefined) { item.sockets = []; }
          item.sockets[item.sockets.length] = "Prismatic";
        }

        if(item.equip_location == 21) {
          R.SLOT_CHOICES.offhand[R.SLOT_CHOICES.offhand.length] = item;   // Dual-hand items get added to offhands, too.
        }
        item.equip_location = getRealSlot(item.equip_location, true);

        if(R.SLOT_CHOICES[item.equip_location] === undefined) { R.SLOT_CHOICES[item.equip_location] = []; }
        R.SLOT_CHOICES[item.equip_location][R.SLOT_CHOICES[item.equip_location].length] = item;
        R.ITEM_LOOKUP[item.id] = item;
      }
      R.TALENT_LOOKUP = {};
        for(var talent = 0; talent < R.TALENTS.talent.length; talent++) {
          var t = R.TALENTS.talent[talent];
          t.maxRank = t.rank.length || 1;
          R.TALENT_LOOKUP[t.tier + ":" + t.column] = t;
      }
      R.GLYPH_LOOKUP = {}, R.GLYPHNAME_LOOKUP = {};;
      for(var i = 0; i < R.GLYPHS.length; i++) {
        R.GLYPH_LOOKUP[R.GLYPHS[i].id] = R.GLYPHS[i];
        R.GLYPHNAME_LOOKUP[R.GLYPHS[i].ename] = R.GLYPHS[i];
      }
    })(window.ShadowcraftData);
